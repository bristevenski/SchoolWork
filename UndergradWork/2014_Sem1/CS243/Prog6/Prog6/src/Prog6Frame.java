import java.awt.event.ActionEvent;
import javax.swing.Timer;

/**
This class represents the GUI for Prog6. The frame can read an RPN
expression and demonstrate the process of evaluating that expression.
@author Brianna Muleski
@author Andrew Iverson
*/
public class Prog6Frame extends javax.swing.JFrame 
                        implements java.awt.event.ActionListener
{
   private final int FRAME_X = 465;
   private final int FRAME_Y = 350;
   private Timer frameTimer = new Timer(800, this);
   private boolean paused = true;
   private RpnEvaluator rpne;
   private int steps = 0;
   private int waitTime = 1;
   
   /**
   Creates new form Prog6Frame. Initializes the components of the frame, sets
   the size, and sets the steps and answer text fields to read-only.
   */
   public Prog6Frame() 
   {
      initComponents();
      setSize(FRAME_X, FRAME_Y);
      numSteps.setEditable(false);
      answer.setEditable(false);
   }
   
   /**
   Handles the timer for the frame. When the timer reaches 0, a step is taken
   in processing the expression. The number of steps is incremented and the 
   timer is reset after the process is done. The processing stops when the 
   expression is either valid or done.   
   @param ae the action of running the frame
   */
   @Override
   public void actionPerformed(ActionEvent ae) 
   {
      if( !paused && !rpne.getDone() && rpne.getValid() )
      {
         waitTime = waitTime - 1;
         if( waitTime == 0 )
         {
            processToken();
            waitTime = 1;
         }
      }
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rpnLabel = new javax.swing.JLabel();
        rpnExpression = new javax.swing.JTextField();
        answerLabel = new javax.swing.JLabel();
        answer = new javax.swing.JTextField();
        stepButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        queueLabel = new javax.swing.JLabel();
        stackLabel = new javax.swing.JLabel();
        stepsLabel = new javax.swing.JLabel();
        numSteps = new javax.swing.JTextField();
        startStopButton = new javax.swing.JButton();
        stackList = new java.awt.List();
        queueList = new java.awt.List();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        rpnLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rpnLabel.setText("Raw RPN expression:");
        getContentPane().add(rpnLabel);
        rpnLabel.setBounds(20, 10, 120, 15);

        rpnExpression.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rpnExpression.setText("Enter expression here");
        rpnExpression.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rpnExpressionMouseClicked(evt);
            }
        });
        getContentPane().add(rpnExpression);
        rpnExpression.setBounds(140, 10, 280, 30);

        answerLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        answerLabel.setText("Answer:");
        getContentPane().add(answerLabel);
        answerLabel.setBounds(80, 270, 50, 15);

        answer.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        getContentPane().add(answer);
        answer.setBounds(130, 270, 210, 30);

        stepButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        stepButton.setText("Step");
        stepButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stepButtonActionPerformed(evt);
            }
        });
        getContentPane().add(stepButton);
        stepButton.setBounds(150, 80, 60, 23);

        clearButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        getContentPane().add(clearButton);
        clearButton.setBounds(240, 80, 60, 23);

        queueLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        queueLabel.setText("Queue:");
        getContentPane().add(queueLabel);
        queueLabel.setBounds(50, 50, 50, 15);

        stackLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        stackLabel.setText("Stack:");
        getContentPane().add(stackLabel);
        stackLabel.setBounds(360, 50, 40, 15);

        stepsLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        stepsLabel.setText("Steps Taken:");
        getContentPane().add(stepsLabel);
        stepsLabel.setBounds(160, 210, 80, 15);

        numSteps.setBackground(null);
        numSteps.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        numSteps.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        numSteps.setText("0");
        numSteps.setBorder(null);
        getContentPane().add(numSteps);
        numSteps.setBounds(250, 200, 30, 30);

        startStopButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        startStopButton.setText("Start");
        startStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startStopButtonActionPerformed(evt);
            }
        });
        getContentPane().add(startStopButton);
        startStopButton.setBounds(190, 140, 73, 23);

        stackList.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        getContentPane().add(stackList);
        stackList.setBounds(310, 70, 130, 160);

        queueList.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        getContentPane().add(queueList);
        queueList.setBounds(10, 70, 130, 160);

        pack();
    }// </editor-fold>//GEN-END:initComponents

   /**
   Handles pressing the start/stop button. When the button reads "Start" the
   timer is started and the button switches to "Stop". The paused flag is
   switched to false and reads the expression if not done already.
   @param evt the action of pressing the button
   */
   private void startStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startStopButtonActionPerformed
      if( paused )
      {
         if( rpne == null )
            rpne = new RpnEvaluator(rpnExpression.getText());
         frameTimer.start();
         startStopButton.setText("Stop");
         paused = false;
      }
      else
      {
         frameTimer.stop();
         startStopButton.setText("Start");
         paused = true;
      }
   }//GEN-LAST:event_startStopButtonActionPerformed

   /**
   Handles pressing the step button. Grabs the expression from the expression
   text field if not done already, and processes a token of that expression.
   @param evt the action of pressing the button
   */
   private void stepButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stepButtonActionPerformed
      if( rpne == null )
         rpne = new RpnEvaluator(rpnExpression.getText());
      processToken();
   }//GEN-LAST:event_stepButtonActionPerformed

   /**
   Processes one Token of the expression. Tests the expression for validity
   and if the end was reached. Updates the stack list, queue list, and number
   of steps taken.
   */
   private void processToken()
   {
      rpne.ProcessToken();
      if( !rpne.getValid() )
         invalidExpression();
      else if( rpne.getDone() )
         finishedExpression();
      else
      {
         showStack();
         showQueue();
         steps++;
         numSteps.setText(Integer.toString(steps));
      }
   }
   
   /**
   Handles the process of an invalid expression. Disables the step and
   start/stop buttons, prints an error message in the answer text field, 
   resets the start/stop button functions if it was being used, and clears 
   the lists.
    */
   private void invalidExpression()
   {
      stepButton.setEnabled(false);
      startStopButton.setEnabled(false);
      answer.setText("Invalid Expression");
      if( !paused )
      {
         frameTimer.stop();
         startStopButton.setText("Start");
         paused = true;
      } 
      stackList.removeAll();
      queueList.removeAll();
   }
   
   /**
   Handles the process of reaching the end of the expression. Disables the
   step and start/stop buttons, prints the answer in the text field,
   resets the start/stop button functions if it was being used, and clears
   the lists.
    */
   private void finishedExpression()
   {
      stepButton.setEnabled(false);
      startStopButton.setEnabled(false);
      answer.setText(rpne.getAnswer().toString());
      if( !paused )
      {
         frameTimer.stop();
         startStopButton.setText("Start");
         paused = true;
      }
      stackList.removeAll();
      queueList.removeAll();
   }
   
   /**
   Shows the stack in the stack list.
   */
   private void showStack()
   {
      stackList.removeAll();
      Stack temp = new Stack();
      Stack s = rpne.getStack();
      while( !s.isEmpty() )
         temp.push(s.pop());
      while( !temp.isEmpty() )
      {
         Fraction f = (Fraction) temp.pop();
         stackList.add(f.toString());
         s.push(f);
      }
   }
   
   /**
   Shows the queue in the queue list.
   */
   private void showQueue()
   {
      queueList.removeAll();
      Queue temp = new Queue();
      Queue q = rpne.getQueue();
      while( !q.isEmpty() )
         temp.add(q.remove());
      while( !temp.isEmpty() )
      {
         Fraction f = (Fraction) temp.remove();
         queueList.add(f.toString());
         q.add(f);
      }
   }
   
   /**
   Handles pressing the clear button. Clears the lists of stack and queue.
   Resets the steps, expression, and text fields of both. Enables the
   step and start/stop button.
   @param evt the action of pressing the button
   */
   private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
      queueList.removeAll();
      stackList.removeAll();
      answer.setText(null);
      rpnExpression.setText("Enter expression here");
      steps = 0;
      numSteps.setText("0");
      stepButton.setEnabled(true);
      startStopButton.setEnabled(true);
      rpne = null;
   }//GEN-LAST:event_clearButtonActionPerformed

   /**
   Erases the default text from the expression text field.
   @param evt the action of clicking the text field
   */
   private void rpnExpressionMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_rpnExpressionMouseClicked
   {//GEN-HEADEREND:event_rpnExpressionMouseClicked
      if( rpnExpression.getText().equals("Enter expression here") )
         rpnExpression.setText(" ");
   }//GEN-LAST:event_rpnExpressionMouseClicked

   /**
   Runs the frame.
   @param args the command line arguments
   */
   public static void main(String args[]) {
      /* Set the Nimbus look and feel */
      //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
       * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
       */
      try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(Prog6Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(Prog6Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(Prog6Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(Prog6Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      //</editor-fold>

      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable() 
      {
         public void run() 
         {
            new Prog6Frame().setVisible(true);
         }
      });
   }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField answer;
    private javax.swing.JLabel answerLabel;
    private javax.swing.JButton clearButton;
    private javax.swing.JTextField numSteps;
    private javax.swing.JLabel queueLabel;
    private java.awt.List queueList;
    private javax.swing.JTextField rpnExpression;
    private javax.swing.JLabel rpnLabel;
    private javax.swing.JLabel stackLabel;
    private java.awt.List stackList;
    private javax.swing.JButton startStopButton;
    private javax.swing.JButton stepButton;
    private javax.swing.JLabel stepsLabel;
    // End of variables declaration//GEN-END:variables


}
