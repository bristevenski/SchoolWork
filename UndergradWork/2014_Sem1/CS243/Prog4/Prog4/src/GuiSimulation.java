/**
The class represents the user interface of the simulation of a single-line,
single-server system. The interface will show the statistics of the system
and the buttons to interact with the system.
@author Brianna Muleski
*/
public class GuiSimulation extends java.awt.Frame 
{
   Simulation sim = new Simulation();

   /** 
   Creates new form GuiSimulation 
   */
   public GuiSimulation() 
   {
      initComponents();
      setReadOnly();
   }
   
   /**
   Sets all the text fields to read-only
   */
   private void setReadOnly()
   {
      curCust.setEditable(false);
      curTime.setEditable(false);
      numWait.setEditable(false);
      aveTime.setEditable(false);
      totWaitTime.setEditable(false);
      noWait.setEditable(false);
      numServed.setEditable(false);
   }

   /** This method is called from within the constructor to
   initialize the form.
   WARNING: Do NOT modify this code. The content of this method is
   always regenerated by the Form Editor.
   */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {

      panel1 = new java.awt.Panel();
      showStats = new java.awt.Button();
      arrivButton = new java.awt.Button();
      completeButton = new java.awt.Button();
      incTimeButton = new java.awt.Button();
      aveTimeLbl = new java.awt.Label();
      aveTime = new java.awt.TextField();
      totTimeLbl = new java.awt.Label();
      totWaitTime = new java.awt.TextField();
      noWaitLbl = new java.awt.Label();
      noWait = new java.awt.TextField();
      numServedLbl = new java.awt.Label();
      numServed = new java.awt.TextField();
      curTimeLbl = new java.awt.Label();
      curTime = new java.awt.TextField();
      curCustLbl = new java.awt.Label();
      curCust = new java.awt.TextField();
      numWaitLbl = new java.awt.Label();
      numWait = new java.awt.TextField();

      addWindowListener(new java.awt.event.WindowAdapter()
      {
         public void windowClosing(java.awt.event.WindowEvent evt)
         {
            exitForm(evt);
         }
      });

      panel1.setMinimumSize(new java.awt.Dimension(400, 300));
      panel1.setPreferredSize(new java.awt.Dimension(400, 300));
      panel1.setLayout(null);

      showStats.setLabel("Show Statistics");
      showStats.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            showStatsActionPerformed(evt);
         }
      });
      panel1.add(showStats);
      showStats.setBounds(10, 10, 100, 24);

      arrivButton.setLabel("Arrival");
      arrivButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            arrivButtonActionPerformed(evt);
         }
      });
      panel1.add(arrivButton);
      arrivButton.setBounds(130, 10, 49, 24);

      completeButton.setLabel("Completion");
      completeButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            completeButtonActionPerformed(evt);
         }
      });
      panel1.add(completeButton);
      completeButton.setBounds(190, 10, 80, 24);

      incTimeButton.setLabel("Increment Time");
      incTimeButton.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            incTimeButtonActionPerformed(evt);
         }
      });
      panel1.add(incTimeButton);
      incTimeButton.setBounds(290, 10, 102, 24);

      aveTimeLbl.setName(""); // NOI18N
      aveTimeLbl.setText("Average Wait Time:");
      panel1.add(aveTimeLbl);
      aveTimeLbl.setBounds(10, 50, 109, 20);
      panel1.add(aveTime);
      aveTime.setBounds(10, 80, 140, 20);

      totTimeLbl.setText("Total Wait Time:");
      panel1.add(totTimeLbl);
      totTimeLbl.setBounds(10, 110, 92, 20);
      panel1.add(totWaitTime);
      totWaitTime.setBounds(10, 140, 60, 20);

      noWaitLbl.setText("Number of People That Did NOT Have to Wait:");
      panel1.add(noWaitLbl);
      noWaitLbl.setBounds(10, 170, 255, 20);
      panel1.add(noWait);
      noWait.setBounds(10, 200, 60, 20);

      numServedLbl.setText("Number of People Served:");
      panel1.add(numServedLbl);
      numServedLbl.setBounds(10, 230, 148, 20);
      panel1.add(numServed);
      numServed.setBounds(10, 260, 60, 20);

      curTimeLbl.setText("Current Time:");
      panel1.add(curTimeLbl);
      curTimeLbl.setBounds(310, 70, 79, 20);

      curTime.setText("0");
      panel1.add(curTime);
      curTime.setBounds(330, 100, 60, 20);

      curCustLbl.setText("Current Customer:");
      panel1.add(curCustLbl);
      curCustLbl.setBounds(280, 130, 106, 20);

      curCust.setText("none");
      panel1.add(curCust);
      curCust.setBounds(330, 160, 60, 20);

      numWaitLbl.setText("Number Waiting:");
      panel1.add(numWaitLbl);
      numWaitLbl.setBounds(290, 190, 96, 20);

      numWait.setText("0");
      panel1.add(numWait);
      numWait.setBounds(330, 220, 60, 20);

      add(panel1, java.awt.BorderLayout.CENTER);

      pack();
   }// </editor-fold>//GEN-END:initComponents

    /** 
    Exit the Application 
    */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
   /**
   Displays the statistics of the system when the button is activated.
   The statistics include the average wait time, the total wait time,
   the number of people that didn't have to wait, and the number of 
   people that were served.
   @param evt the action of activating the Show Statistics button
   */
   private void showStatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showStatsActionPerformed
      
      double average = sim.avgWaitTime();
      int sumTime = sim.sumOfWaitTime();
      int numNoWait = sim.numOfNoWait();
      int numCustServed = sim.numServed();
      
      aveTime.setText(String.valueOf(average));
      totWaitTime.setText(String.valueOf(sumTime));
      noWait.setText(String.valueOf(numNoWait));
      numServed.setText(String.valueOf(numCustServed));
   }//GEN-LAST:event_showStatsActionPerformed
   
   /**
   Adds the customer that arrived to the system when the button is activated.
   If the line is full, no action is taken. The current customer being served
   and the number of customers waiting is displayed.
   @param evt the action of activating the Arrival button
    */
   private void arrivButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arrivButtonActionPerformed
      if( sim.arrive() )
         curCust.setText(sim.curServed().toString());
      numWait.setText(String.valueOf(sim.numWaiting()));
              
   }//GEN-LAST:event_arrivButtonActionPerformed
   
   /**
   Updates the current customer being served and the number of customers
   waiting when a service is completed. If there are no more customers left
   "none" is displayed in the current customer field.
   @param evt the action of activating the Completion button
   */
   private void completeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completeButtonActionPerformed
      sim.served();
      if( sim.curServed() == null )
         curCust.setText("none");
      else
         curCust.setText(sim.curServed().toString());
         numWait.setText(String.valueOf(sim.numWaiting()));
   }//GEN-LAST:event_completeButtonActionPerformed
   
   /**
   Increments the current time field by 1. Displays the updated time.
   @param evt the action of activating the Increment Time button
   */
   private void incTimeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_incTimeButtonActionPerformed
      sim.updateTime(1);
      curTime.setText(String.valueOf(sim.curTime()));
   }//GEN-LAST:event_incTimeButtonActionPerformed

   /**
   @param args the command line arguments
   */
   public static void main(String args[]) 
   {
      java.awt.EventQueue.invokeLater(new Runnable() 
      {
         public void run() 
         {
            new GuiSimulation().setVisible(true);
         }
      });
   }


   // Variables declaration - do not modify//GEN-BEGIN:variables
   private java.awt.Button arrivButton;
   private java.awt.TextField aveTime;
   private java.awt.Label aveTimeLbl;
   private java.awt.Button completeButton;
   private java.awt.TextField curCust;
   private java.awt.Label curCustLbl;
   private java.awt.TextField curTime;
   private java.awt.Label curTimeLbl;
   private java.awt.Button incTimeButton;
   private java.awt.TextField noWait;
   private java.awt.Label noWaitLbl;
   private java.awt.TextField numServed;
   private java.awt.Label numServedLbl;
   private java.awt.TextField numWait;
   private java.awt.Label numWaitLbl;
   private java.awt.Panel panel1;
   private java.awt.Button showStats;
   private java.awt.Label totTimeLbl;
   private java.awt.TextField totWaitTime;
   // End of variables declaration//GEN-END:variables

}
