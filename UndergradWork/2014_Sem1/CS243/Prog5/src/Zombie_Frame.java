
import java.awt.event.ActionEvent;
import javax.swing.Timer;
/**
This class represent the Game Frame. It handles all the user interactions and 
the movements and interactions of the figures on the panel.
@author Brianna Muleski
@author Andrew Iverson
*/
public class Zombie_Frame extends java.awt.Frame implements java.awt.event.ActionListener
{
   private final int PLAYER_MOVE = 15;
   private final int FRAME_X = 1200;
   private final int FRAME_Y = 700;
   private final int BASE_TIME = 92;
   private final double TIME_MOD1 = .33;
   private final int TIME_MOD2 = 60;
   private final int TIME_ADJ = 3;
   private Timer moveTimer = new Timer(333, this);
   private PFigureList figures;
   private int numLevel;
   private boolean paused = false; //Flag to stop player movements 
   private boolean gmeOver = false; 
   private float timeRemaining = BASE_TIME;

   /** 
   Constructor. Creates a new Frame and initializes all the components.
   */
   public Zombie_Frame() 
   {
        initComponents();
        setReadOnly();
        numLevel = 1;
        figures = new PFigureList(numLevel, gamePanel);
        setSize(FRAME_X, FRAME_Y);
        gamePanel.setSize(1200, 600);
        gameOver.setVisible(false);
        levelComplete.setVisible(false);
   }
   
   /**
   Sets all the text fields to read-only.
   */
   private void setReadOnly()
   {
      level.setEditable(false);
      timeLeft.setEditable(false);
      gameOver.setEditable(false);
      levelComplete.setEditable(false);
   }
   
   /**
   Controls the movements of the figures and the game Timer. If A Player-Zombie
   collision is detected then the game over function is called. If the game
   timer reaches zero then the level complete message is displayed and the level
   is incremented.
   @param ae the action of starting the game
   */
   @Override
   public void actionPerformed(ActionEvent ae) 
   {
      figures.hideFigures();
      figures.moveFigures();
      figures.drawFigures();
      if ( figures.collision(gamePanel) )
      {
         gameOver();      
      }     
     
      //TIMER Countdown
      timeRemaining = timeRemaining - 1;
      //Uses String format dividing, modulus to show the correct time from
      //move timer to display as a countdown
      timeLeft.setText( "" + ( Math.round(timeRemaining * TIME_MOD1) 
                        / TIME_MOD2 ) + ":" + String.format("%02d", 
                        Math.round(timeRemaining * TIME_MOD1) % TIME_MOD2 ));
      if ( timeRemaining == 0 )
      {
         moveTimer.stop();
         paused = true;         
         levelComplete.setText("Level " + numLevel + " complete! "
                               + "Press start to begin next level." );
         levelComplete.setVisible(true);
         levelComplete.requestFocus();
         numLevel++;
         startButton.setEnabled(true);
         pauseButton.setEnabled(false);
      }
   }
  
   /**
   Resets the information for the next level. Sets the text of the level to the
   new level number and resets the level timer.
   */
   private void nextLevel()
   {
      level.setText(Integer.toString(numLevel));
      level.requestFocus();
      if( numLevel >= TIME_ADJ )
        timeRemaining = BASE_TIME * numLevel - 1 * numLevel;
      else
        timeRemaining = BASE_TIME * numLevel;
      timeLeft.requestFocus();
      figures.hideFigures();
      gamePanel.requestFocus();
   }
   
   /**
   Handles a "game over" instance. Stops the movement of the figures, disables
   the pause button, enables the start button, and displays the "game over"
   message.
   */
   public void gameOver()
   {
      gmeOver = true;
      pauseButton.setEnabled(false);
      startButton.setEnabled(true);
      moveTimer.stop();
      gameOver.setVisible(true);
      gameOver.requestFocus();
   }

   
   /** This method is called from within the constructor to
   initialize the form.
   WARNING: Do NOT modify this code. The content of this method is
   always regenerated by the Form Editor.
   */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      gamePanel = new java.awt.Panel();
      gameOver = new javax.swing.JTextField();
      levelComplete = new javax.swing.JTextField();
      label1 = new java.awt.Label();
      label2 = new java.awt.Label();
      startButton = new java.awt.Button();
      pauseButton = new java.awt.Button();
      quitButton = new java.awt.Button();
      level = new javax.swing.JTextField();
      timeLeft = new javax.swing.JTextField();

      setMinimumSize(new java.awt.Dimension(1200, 700));
      addWindowListener(new java.awt.event.WindowAdapter() {
         public void windowClosing(java.awt.event.WindowEvent evt) {
            exitForm(evt);
         }
      });
      setLayout(null);

      gamePanel.setBackground(new java.awt.Color(0, 153, 0));
      gamePanel.setMinimumSize(new java.awt.Dimension(1200, 500));
      gamePanel.setPreferredSize(new java.awt.Dimension(1200, 500));
      gamePanel.addKeyListener(new java.awt.event.KeyAdapter() {
         public void keyPressed(java.awt.event.KeyEvent evt) {
            movePlayer(evt);
         }
      });
      gamePanel.setLayout(null);

      gameOver.setBackground(new java.awt.Color(0, 153, 0));
      gameOver.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
      gameOver.setText("Game Over!!");
      gameOver.setBorder(null);
      gamePanel.add(gameOver);
      gameOver.setBounds(460, 280, 310, 80);

      levelComplete.setBackground(new java.awt.Color(0, 153, 0));
      levelComplete.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
      levelComplete.setBorder(null);
      gamePanel.add(levelComplete);
      levelComplete.setBounds(130, 170, 910, 100);

      add(gamePanel);
      gamePanel.setBounds(0, 0, 1200, 580);

      label1.setFont(new java.awt.Font("Dialog", 0, 48)); // NOI18N
      label1.setText("Time Left:");
      add(label1);
      label1.setBounds(30, 630, 210, 60);

      label2.setFont(new java.awt.Font("Dialog", 0, 48)); // NOI18N
      label2.setText("Level:");
      add(label2);
      label2.setBounds(440, 620, 140, 60);

      startButton.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
      startButton.setLabel("Start!");
      startButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            startButtonActionPerformed(evt);
         }
      });
      add(startButton);
      startButton.setBounds(730, 630, 130, 40);

      pauseButton.setEnabled(false);
      pauseButton.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
      pauseButton.setLabel("Pause");
      pauseButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            pauseButtonActionPerformed(evt);
         }
      });
      add(pauseButton);
      pauseButton.setBounds(890, 630, 150, 40);

      quitButton.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
      quitButton.setLabel("Quit");
      quitButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            quitButtonActionPerformed(evt);
         }
      });
      add(quitButton);
      quitButton.setBounds(1070, 630, 120, 40);

      level.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
      level.setText("1");
      level.setToolTipText("");
      level.setBorder(null);
      add(level);
      level.setBounds(590, 620, 90, 60);

      timeLeft.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
      timeLeft.setText("0:30");
      timeLeft.setBorder(null);
      add(timeLeft);
      timeLeft.setBounds(250, 620, 160, 80);

      pack();
   }// </editor-fold>//GEN-END:initComponents

    /** 
    Exit the Application 
    */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

   /**
   Handles the action of pressing the Start button. Starts the timer for the
   game, enables the pause button, and disables the start button. If it is the
   end of a game, the start button activates a new game. If it is not the first
   level then the next level function is called, the level complete message 
   is displayed, and the figures are reset to start the new level.
   @param evt the action of pressing the start button
   */
   private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
      if ( gmeOver )
      {
         numLevel = 1;
         figures.reset(numLevel, gamePanel);
         gameOver.setVisible(false);
         timeRemaining = BASE_TIME;
         gamePanel.repaint();
      }
      if( numLevel != 1)
      {
         levelComplete.setVisible(false);
         nextLevel();
         figures.reset(numLevel, gamePanel);
      }      
      pauseButton.setEnabled(true);
      startButton.setEnabled(false);
      moveTimer.start();
      paused = false;
      gamePanel.requestFocus();
   }//GEN-LAST:event_startButtonActionPerformed

   /**
   Handles the movement of the Player.
   @param evt the action of pressing the arrow keys
   */
   private void movePlayer(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_movePlayer
      if ( !paused )
      {
         figures.getPlayer().hide();
         if ( evt.getKeyCode() == java.awt.event.KeyEvent.VK_DOWN )
            figures.movePlayer(0, PLAYER_MOVE);
         else if ( evt.getKeyCode() == java.awt.event.KeyEvent.VK_UP )
            figures.movePlayer(0, -PLAYER_MOVE);
         else if ( evt.getKeyCode() == java.awt.event.KeyEvent.VK_LEFT )
            figures.movePlayer(-PLAYER_MOVE, 0);
         else if ( evt.getKeyCode() == java.awt.event.KeyEvent.VK_RIGHT )
            figures.movePlayer(PLAYER_MOVE, 0);
         figures.drawFigures();
      }
   }//GEN-LAST:event_movePlayer

   /**
   Handles the action of pressing the Pause button. The time remaining must be
   0. If the game is not already paused then the move timer is stopped and the
   button text is changed to "resume". If the game is already paused then the
   move timer is started again and the button text is changed to "pause".
   @param evt the action of pressing the pause button
   */
   private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
      if ( timeRemaining != 0 )
      {
         if ( paused )
         {         
            moveTimer.start();
            gamePanel.requestFocus();
            pauseButton.setLabel("Pause");
         }
         else
         {
            moveTimer.stop();
            gamePanel.requestFocus();
            pauseButton.setLabel("Resume");         
         }
         paused = ! paused;
      }
   }//GEN-LAST:event_pauseButtonActionPerformed

   /**
   Handles the action of pressing the Quit button. Exits the system when the
   quit button is pressed.
   @param evt the action of pressing the quit button
   */
    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
       System.exit(0);
    }//GEN-LAST:event_quitButtonActionPerformed

   /**
   @param args the command line arguments
   */
   public static void main(String args[]) 
   {
      java.awt.EventQueue.invokeLater(new Runnable() 
      {
         public void run() 
         {
            new Zombie_Frame().setVisible(true);
         }
      });
   }


   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JTextField gameOver;
   private java.awt.Panel gamePanel;
   private java.awt.Label label1;
   private java.awt.Label label2;
   private javax.swing.JTextField level;
   private javax.swing.JTextField levelComplete;
   private java.awt.Button pauseButton;
   private java.awt.Button quitButton;
   private java.awt.Button startButton;
   private javax.swing.JTextField timeLeft;
   // End of variables declaration//GEN-END:variables

}
