import java.io.*;
import java.net.*;


/**
Prog1Frame handles the GUI and functions of the GUI for Program 1.
@author Brianna Muleski
*/
public class Prog1JFrame extends javax.swing.JFrame 
{
    private Socket socket;
    private PrintWriter pw;
    private BufferedReader br;

    /**
    Creates new form Prog1JFrame.
    */
    public Prog1JFrame() 
    {
        initComponents();
    }

    /**
    This method is called from within the constructor to initialize the form.
    WARNING: Do NOT modify this code. The content of this method is always
    regenerated by the Form Editor.
    */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ipLbl = new javax.swing.JLabel();
        ipTxt = new javax.swing.JTextField();
        portLbl = new javax.swing.JLabel();
        portTxt = new javax.swing.JTextField();
        connectBtn = new javax.swing.JButton();
        msgLbl = new javax.swing.JLabel();
        msgTxt = new javax.swing.JTextField();
        sendBtn = new javax.swing.JButton();
        clientServerLbl = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        clientServerTxt = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Program 1 Knock Knock Client");
        setMaximumSize(new java.awt.Dimension(600, 600));
        setMinimumSize(new java.awt.Dimension(600, 600));

        ipLbl.setText("IP Address");
        ipLbl.setFocusable(false);

        ipTxt.setText("io.uwplatt.edu");

        portLbl.setText("Port Number");
        portLbl.setFocusable(false);

        portTxt.setText("5764");

        connectBtn.setText("Connect");
        connectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectBtnActionPerformed(evt);
            }
        });

        msgLbl.setText("Message to Server");
        msgLbl.setFocusable(false);

        sendBtn.setText("Send");
        sendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendBtnActionPerformed(evt);
            }
        });

        clientServerLbl.setText("Client/Server Communication");
        clientServerLbl.setFocusable(false);

        clientServerTxt.setEditable(false);
        clientServerTxt.setColumns(20);
        clientServerTxt.setRows(5);
        jScrollPane1.setViewportView(clientServerTxt);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ipLbl)
                                .addGap(18, 18, 18)
                                .addComponent(ipTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(portLbl)
                                .addGap(10, 10, 10)
                                .addComponent(portTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(connectBtn))
                            .addComponent(msgLbl)
                            .addComponent(sendBtn)
                            .addComponent(clientServerLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 267, Short.MAX_VALUE))
                    .addComponent(msgTxt))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(ipLbl))
                    .addComponent(ipTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(portLbl)
                    .addComponent(portTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectBtn))
                .addGap(27, 27, 27)
                .addComponent(msgLbl)
                .addGap(6, 6, 6)
                .addComponent(msgTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(sendBtn)
                .addGap(17, 17, 17)
                .addComponent(clientServerLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    Handles the action of pushing the connect button. Tries to connect to the
    IP address and port specified by the user. If connection fails, an error
    message is displayed.
    @param evt pushing the connect button
    */
    private void connectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectBtnActionPerformed
        try
        {
            if(connectBtn.getText().equals("Connect"))
            {
                int port = Integer.parseInt(portTxt.getText());
                InetAddress ip = InetAddress.getByName(ipTxt.getText());
                socket = new Socket(ip, port);
                pw = new PrintWriter(socket.getOutputStream(), true);
                br = new BufferedReader(new InputStreamReader(
                                        socket.getInputStream()));
                
                clientServerTxt.append("Connected to Server\n");
                connectBtn.setText("Disconnect");
            }
            else
            {
                Disconnect();
            }
        }
        catch (Exception e)
        {
            clientServerTxt.append("Error: " + e + "\n");
        }
    }//GEN-LAST:event_connectBtnActionPerformed

    /**
    Handles the action of pushing the send button. Tries to send a message to
    the server. If the connection fails, an error message is displayed. Prints
    out the message sent and message received. If connection is ended my user,
    connection is closed.
    @param evt pushing the send button
     */
    private void sendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendBtnActionPerformed
        try
        {
            if( socket != null)
            {
                String message = msgTxt.getText();
                
                clientServerTxt.append("Client: " + message + "\n");
                pw.println(message);
                
                String dataRead = br.readLine();
                clientServerTxt.append("Server: " + dataRead + "\n");
                
                if( message.equalsIgnoreCase("quit"))
                    Disconnect();
                
                msgTxt.setText(null);
            }
        }
        catch (Exception e)
        {
            clientServerTxt.append("Error: " + e + "\n");
        }
    }//GEN-LAST:event_sendBtnActionPerformed

    /**
    Runs the frame.
    @param args the command line arguments
    */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Prog1JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Prog1JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Prog1JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Prog1JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() 
        {
            public void run() 
            {
                new Prog1JFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel clientServerLbl;
    private javax.swing.JTextArea clientServerTxt;
    private javax.swing.JButton connectBtn;
    private javax.swing.JLabel ipLbl;
    private javax.swing.JTextField ipTxt;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel msgLbl;
    private javax.swing.JTextField msgTxt;
    private javax.swing.JLabel portLbl;
    private javax.swing.JTextField portTxt;
    private javax.swing.JButton sendBtn;
    // End of variables declaration//GEN-END:variables

    /**
    Tries to disconnect from the sever, closes the i/o stream and socket.
    If the disconnection fails, an error message is displayed.
    */
    private void Disconnect() 
    {
        try
        {
            br.close();
            pw.close();
            socket.close();
            socket = null;

            clientServerTxt.append("Disconnected\n");
            connectBtn.setText("Connect");           
        }
        catch(Exception e)
        {
            clientServerTxt.append("Error: " + e + "\n");
        }
    }
}
